{
	"compiler": {
		"version": "0.8.14+commit.80d49f37"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "path",
								"type": "bytes"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountIn",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountOutMinimum",
								"type": "uint256"
							}
						],
						"internalType": "struct ISwapRouter.ExactInputParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "exactInput",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "tokenOut",
								"type": "address"
							},
							{
								"internalType": "uint24",
								"name": "fee",
								"type": "uint24"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountIn",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountOutMinimum",
								"type": "uint256"
							},
							{
								"internalType": "uint160",
								"name": "sqrtPriceLimitX96",
								"type": "uint160"
							}
						],
						"internalType": "struct ISwapRouter.ExactInputSingleParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "exactInputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "path",
								"type": "bytes"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountOut",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountInMaximum",
								"type": "uint256"
							}
						],
						"internalType": "struct ISwapRouter.ExactOutputParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "exactOutput",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "tokenOut",
								"type": "address"
							},
							{
								"internalType": "uint24",
								"name": "fee",
								"type": "uint24"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountOut",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountInMaximum",
								"type": "uint256"
							},
							{
								"internalType": "uint160",
								"name": "sqrtPriceLimitX96",
								"type": "uint160"
							}
						],
						"internalType": "struct ISwapRouter.ExactOutputSingleParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "exactOutputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"exactInput((bytes,address,uint256,uint256,uint256))": {
					"params": {
						"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
					},
					"returns": {
						"amountOut": "The amount of the received token"
					}
				},
				"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
					"params": {
						"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
					},
					"returns": {
						"amountOut": "The amount of the received token"
					}
				},
				"exactOutput((bytes,address,uint256,uint256,uint256))": {
					"params": {
						"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
					},
					"returns": {
						"amountIn": "The amount of the input token"
					}
				},
				"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
					"params": {
						"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
					},
					"returns": {
						"amountIn": "The amount of the input token"
					}
				}
			},
			"title": "Router token swapping functionality",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"exactInput((bytes,address,uint256,uint256,uint256))": {
					"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
				},
				"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
					"notice": "Swaps `amountIn` of one token for as much as possible of another token"
				},
				"exactOutput((bytes,address,uint256,uint256,uint256))": {
					"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
				},
				"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
					"notice": "Swaps as little as possible of one token for `amountOut` of another token"
				}
			},
			"notice": "Functions for swapping tokens via Uniswap V3",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"LUSDAllocator/ISwapRouter.sol": "ISwapRouter"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 1000
		},
		"remappings": []
	},
	"sources": {
		"LUSDAllocator/ISwapRouter.sol": {
			"keccak256": "0xd9d3b788518fe0f0ba8f7d918cddccf96d54400e47a93fa5759db837ba619dd4",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://f14eade884a2dda8ddf8b9b0b830413b77688e14c3e8a6a955b843d2538a8d21",
				"dweb:/ipfs/Qmavp3wZStW79WnZQtETncK2iDbzfxyA8jGLXnA6cQP6eZ"
			]
		}
	},
	"version": 1
}