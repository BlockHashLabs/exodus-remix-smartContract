{
	"compiler": {
		"version": "0.8.14+commit.80d49f37"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IExodusAuthority",
						"name": "_authority",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "_exo",
						"type": "address"
					},
					{
						"internalType": "contract IgEXO",
						"name": "_gexo",
						"type": "address"
					},
					{
						"internalType": "contract IStaking",
						"name": "_staking",
						"type": "address"
					},
					{
						"internalType": "contract ITreasury",
						"name": "_treasury",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IExodusAuthority",
						"name": "authority",
						"type": "address"
					}
				],
				"name": "AuthorityUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "Bond",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "CloseMarket",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "baseToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "quoteToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "initialPrice",
						"type": "uint256"
					}
				],
				"name": "CreateMarket",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "oldControlVariable",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "newControlVariable",
						"type": "uint64"
					}
				],
				"name": "Tuned",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "adjustments",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "change",
						"type": "uint64"
					},
					{
						"internalType": "uint48",
						"name": "lastAdjustment",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "timeToAdjusted",
						"type": "uint48"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "authority",
				"outputs": [
					{
						"internalType": "contract IExodusAuthority",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "close",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_quoteToken",
						"type": "address"
					},
					{
						"internalType": "uint256[3]",
						"name": "_market",
						"type": "uint256[3]"
					},
					{
						"internalType": "bool[2]",
						"name": "_booleans",
						"type": "bool[2]"
					},
					{
						"internalType": "uint256[2]",
						"name": "_terms",
						"type": "uint256[2]"
					},
					{
						"internalType": "uint32[2]",
						"name": "_intervals",
						"type": "uint32[2]"
					}
				],
				"name": "create",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id_",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "currentControlVariable",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "currentDebt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "daoReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "debtDecay",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "debtRatio",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxPrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_referral",
						"type": "address"
					}
				],
				"name": "deposit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "payout_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiry_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index_",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReward",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "indexesFor",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "isLive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "liveMarkets",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "liveMarketsFor",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "marketPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "markets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "capacity",
						"type": "uint256"
					},
					{
						"internalType": "contract IERC20",
						"name": "quoteToken",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "capacityInQuote",
						"type": "bool"
					},
					{
						"internalType": "uint64",
						"name": "totalDebt",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "maxPayout",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "sold",
						"type": "uint64"
					},
					{
						"internalType": "uint256",
						"name": "purchased",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "marketsForQuote",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "metadata",
				"outputs": [
					{
						"internalType": "uint48",
						"name": "lastTune",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "lastDecay",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "length",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "depositInterval",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "tuneInterval",
						"type": "uint48"
					},
					{
						"internalType": "uint8",
						"name": "quoteDecimals",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "notes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "payout",
						"type": "uint256"
					},
					{
						"internalType": "uint48",
						"name": "created",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "matured",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "redeemed",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "marketID",
						"type": "uint48"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "payoutFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "pendingFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "payout_",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "matured_",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "pullNote",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "newIndex_",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "pushNote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_indexes",
						"type": "uint256[]"
					},
					{
						"internalType": "bool",
						"name": "_sendgOHM",
						"type": "bool"
					}
				],
				"name": "redeem",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "payout_",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_sendgOHM",
						"type": "bool"
					}
				],
				"name": "redeemAll",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "refReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "rewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IExodusAuthority",
						"name": "_newAuthority",
						"type": "address"
					}
				],
				"name": "setAuthority",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_toFrontEnd",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_toDAO",
						"type": "uint256"
					}
				],
				"name": "setRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "terms",
				"outputs": [
					{
						"internalType": "bool",
						"name": "fixedTerm",
						"type": "bool"
					},
					{
						"internalType": "uint64",
						"name": "controlVariable",
						"type": "uint64"
					},
					{
						"internalType": "uint48",
						"name": "vesting",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "conclusion",
						"type": "uint48"
					},
					{
						"internalType": "uint64",
						"name": "maxDebt",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "updateTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "whitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "whitelisted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Zeus, Indigo Review by: JeffX",
			"kind": "dev",
			"methods": {
				"close(uint256)": {
					"params": {
						"_id": "ID of market to close"
					}
				},
				"create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
					"details": "current price should be in 9 decimals.",
					"params": {
						"_booleans": "[capacity in quote, fixed term]",
						"_intervals": "[deposit interval (seconds), tune interval (seconds)]",
						"_market": "[capacity (in OHM or quote), initial price / OHM (9 decimals), debt buffer (3 decimals)]",
						"_quoteToken": "token used to deposit",
						"_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
					},
					"returns": {
						"id_": "        ID of new bond market"
					}
				},
				"currentControlVariable(uint256)": {
					"details": "accounts for control variable adjustment",
					"params": {
						"_id": "ID of market"
					},
					"returns": {
						"_0": "control variable for market in OHM decimals"
					}
				},
				"currentDebt(uint256)": {
					"details": "accounts for debt decay since last deposit",
					"params": {
						"_id": "ID of market"
					},
					"returns": {
						"_0": "current debt for market in OHM decimals"
					}
				},
				"debtDecay(uint256)": {
					"params": {
						"_id": "ID of market"
					},
					"returns": {
						"_0": "amount of debt to decay"
					}
				},
				"debtRatio(uint256)": {
					"details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
					"params": {
						"_id": "ID of market"
					},
					"returns": {
						"_0": "debt ratio for market in quote decimals"
					}
				},
				"deposit(uint256,uint256,uint256,address,address)": {
					"params": {
						"_amount": "the amount of quote token to spend",
						"_id": "the ID of the market",
						"_maxPrice": "the maximum price at which to buy",
						"_referral": "the front end operator address",
						"_user": "the recipient of the payout"
					},
					"returns": {
						"expiry_": "    the timestamp at which payout is redeemable",
						"index_": "     the user index of the Note (used to redeem or query information)",
						"payout_": "    the amount of gOHM due"
					}
				},
				"indexesFor(address)": {
					"params": {
						"_user": "the user to query notes for"
					},
					"returns": {
						"_0": "the pending notes for the user"
					}
				},
				"isLive(uint256)": {
					"params": {
						"_id": "ID of market"
					}
				},
				"liveMarketsFor(address)": {
					"params": {
						"_token": "quote token to check for"
					}
				},
				"marketPrice(uint256)": {
					"details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
					"params": {
						"_id": "ID of market"
					},
					"returns": {
						"_0": "price for market in OHM decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program"
					}
				},
				"payoutFor(uint256,uint256)": {
					"details": "accounts for debt and control variable decay so it is up to date1e18 = ohm decimals (9) + market price decimals (9)",
					"params": {
						"_amount": "amount of quote tokens to spend",
						"_id": "ID of market"
					},
					"returns": {
						"_0": "amount of OHM to be paid in OHM decimals"
					}
				},
				"pendingFor(address,uint256)": {
					"params": {
						"_index": "the index of the note in the user's array",
						"_user": "the user that the note belongs to"
					},
					"returns": {
						"matured_": "   if the payout can be redeemed",
						"payout_": "    the payout due, in gOHM"
					}
				},
				"pullNote(address,uint256)": {
					"params": {
						"_from": "the address that approved the note transfer",
						"_index": "the index of the note to transfer (in the sender's array)"
					}
				},
				"pushNote(address,uint256)": {
					"params": {
						"_index": "index of note to approve transfer for",
						"_to": "address to approve note transfer for"
					}
				},
				"redeem(address,uint256[],bool)": {
					"params": {
						"_indexes": "the note indexes to redeem",
						"_sendgOHM": "send payout as gOHM or sOHM",
						"_user": "the user to redeem for"
					},
					"returns": {
						"payout_": "    sum of payout sent, in gOHM"
					}
				},
				"redeemAll(address,bool)": {
					"details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
					"params": {
						"_sendgOHM": "send payout as gOHM or sOHM",
						"_user": "user to redeem all notes for"
					},
					"returns": {
						"_0": "sum of payout sent, in gOHM"
					}
				}
			},
			"title": "Olympus Bond Depository V2",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"close(uint256)": {
					"notice": "disable existing market"
				},
				"create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
					"notice": "creates a new market type"
				},
				"currentControlVariable(uint256)": {
					"notice": "up to date control variable"
				},
				"currentDebt(uint256)": {
					"notice": "calculate debt factoring in decay"
				},
				"debtDecay(uint256)": {
					"notice": "amount of debt to decay from total debt for market ID"
				},
				"debtRatio(uint256)": {
					"notice": "calculate current ratio of debt to supply"
				},
				"deposit(uint256,uint256,uint256,address,address)": {
					"notice": "deposit quote tokens in exchange for a bond from a specified market"
				},
				"indexesFor(address)": {
					"notice": "all pending notes for user"
				},
				"isLive(uint256)": {
					"notice": "is a given market accepting deposits"
				},
				"liveMarkets()": {
					"notice": "returns an array of all active market IDs"
				},
				"liveMarketsFor(address)": {
					"notice": "returns an array of all active market IDs for a given quote token"
				},
				"marketPrice(uint256)": {
					"notice": "calculate current market price of quote token in base token"
				},
				"payoutFor(uint256,uint256)": {
					"notice": "payout due for amount of quote tokens"
				},
				"pendingFor(address,uint256)": {
					"notice": "calculate amount available for claim for a single note"
				},
				"pullNote(address,uint256)": {
					"notice": "transfer a note that has been approved by an address"
				},
				"pushNote(address,uint256)": {
					"notice": "approve an address to transfer a note"
				},
				"redeem(address,uint256[],bool)": {
					"notice": "redeem notes for user"
				},
				"redeemAll(address,bool)": {
					"notice": "redeem all redeemable markets for user"
				},
				"setRewards(uint256,uint256)": {
					"notice": "set rewards for front end operators and DAO"
				},
				"whitelist(address)": {
					"notice": "add or remove addresses from the reward whitelist"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"ExodusBonding/OlympusBondDepository.sol": "ExodusBondDepositoryV2"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 1000
		},
		"remappings": []
	},
	"sources": {
		"ExodusBonding/FrontEndRewarder.sol": {
			"keccak256": "0xbd6d482ee114bce60a81f944596585d7c824453157b472edcb543931a2a66aa7",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://638c68cf956df4e65881309109a2b1be94e9732c130b21e5ac4a96e72a96e729",
				"dweb:/ipfs/QmcULfgvDVH6ULLcdDsX77gLeTPf4wQu8peXYwubWM8dur"
			]
		},
		"ExodusBonding/IBondDepository.sol": {
			"keccak256": "0x0ac2362eaba961bb56ce865a7c085b05efd75ed58c687b5a78a7bdeef00aedf7",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://d75c4c1bd49060507d8691a048599da3e23cb8b4ff24f32a4fdebf63f2bf6773",
				"dweb:/ipfs/QmPE1hxeSZrMVvBDLKpDeqnHRNBybCajP4yTogfQHCYT2w"
			]
		},
		"ExodusBonding/IERC20.sol": {
			"keccak256": "0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://fdb71c90b122d9421c799a6b89d8f2c1aba66be1ce2b51d57ba8effb89d73a9c",
				"dweb:/ipfs/QmboLxPYNXFfF7Bc3vprbp9a7UFqC5EaU2ARK7oFZYCBYB"
			]
		},
		"ExodusBonding/IERC20Metadata.sol": {
			"keccak256": "0x9690aab5d4ff226e2618763ca0eb46853234aba1582ba0392c2cdcb2b3c7274c",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://8b60dbe1980b77c76355fb44acc0365a3bf783d3a9223eee04a96da9359038ab",
				"dweb:/ipfs/QmPMw8EZhb5VAJhNjVeTpVQK2nu26DtMtGBZdfd1oFKNML"
			]
		},
		"ExodusBonding/INoteKeeper.sol": {
			"keccak256": "0x6efb864b693abe1c35670ce2a67f592551f54cc4dfb3cd56eb65e561db7ca709",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://bbf5ffe2816f00036114feec939cc5eb1d213bd5f702d063bb2f1e495a7dbd51",
				"dweb:/ipfs/QmczwvKVScV2fLktadj8jobfyYUREjnPqPibz9MKVSqsKi"
			]
		},
		"ExodusBonding/IOlympusAuthority.sol": {
			"keccak256": "0x81a1f77da7ddb3bf1defad03673098cc8d01fbb1ea29d9ef4968b205746f041c",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://2ae99a51e64ed363058e8b18c33b1f498f84d3588f71c442e427fc0021a79a04",
				"dweb:/ipfs/QmTkMMtvLKnhqEtRWCimY2r3oY5B8FpHqmG5fuhbLQKRJg"
			]
		},
		"ExodusBonding/IStaking.sol": {
			"keccak256": "0xc5481248b924479a867d252882a1be9573e4aefe3c7816045e1c0c25daacca70",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://5a0bf214509dcb8f0f9566918c2038e50e5bd9286a19a914f1ed6fbf2de22b1d",
				"dweb:/ipfs/QmTacgzN9NcR1oHwyWdFV8Kazfzoj8dCaNLVVftt35KnNU"
			]
		},
		"ExodusBonding/ITreasury.sol": {
			"keccak256": "0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://591b853c1ba8b666992cabc4279b1d9bfc32e79c618b14e42026bc4ab5a8b9f3",
				"dweb:/ipfs/QmNMn45JaWKZvMg6Fk8JTuCTVJRcAozFmEAGmLHKr7cZ1b"
			]
		},
		"ExodusBonding/IgOHM.sol": {
			"keccak256": "0x6cac4e5000a7bf84a9fb175f38a3a85fdedf2401cca7c0f0d95e9f88c8929e0d",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://e313687e3a347191cbb05812b8bf6832ee47019912f066d3e5c68a7b9fc8ea3f",
				"dweb:/ipfs/QmX2si86fKKkP96jmWCc3D2qbLUiT5mN9mw5nL68CUcHwW"
			]
		},
		"ExodusBonding/NoteKeeper.sol": {
			"keccak256": "0xa04c40c09f13e4c24b5eed8381151a66df81998c710ebe472810a3612f3c031d",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://453495a94903f2fe7bb2a59143d724bed424bc14d7b466a4a1a907842e4b0e1f",
				"dweb:/ipfs/QmNSb7N1TbxgDvmDUBZPNrq6TrFHrVtYyDqba6B1in58hd"
			]
		},
		"ExodusBonding/OlympusAccessControlled.sol": {
			"keccak256": "0xe08e1633d46748f33f8e4bab7cc743f5f427174aa54ad4b9066e8106aad66b69",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://01010d4ba59a88af6b3dd2fe46d06ce141effdf0421dfaa8dc91b8d3cc895654",
				"dweb:/ipfs/QmaPzow7X4CNeCNUd2vgwDpbnqvHxCnQV3L2kfAFu56qAX"
			]
		},
		"ExodusBonding/OlympusBondDepository.sol": {
			"keccak256": "0x6021068aca79dc1df496ef53ac7bcc6361a3ab362ccfd4905e07e8d8a5d72093",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://6f58f650edefd59d82bce3c4edbef4c8e26ef30cc024338e8ed16259333846c3",
				"dweb:/ipfs/QmbXpg1gk3jdrRdjDpAzanc9sA4BLVFSiyUwgfKWCZwMEz"
			]
		},
		"ExodusBonding/SafeERC20.sol": {
			"keccak256": "0x873d82e1f38006c425bcb544d8cca59114ca252f64457e2cc3376ef9a68f2c8e",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://de509f28376467145aff3d45a974708c22838fb21c13f036a79d55d7b389078b",
				"dweb:/ipfs/QmTVAVLp2cgCV3MHnFv1YJbH4eYW4xtayLvpmZR5t8CGYc"
			]
		}
	},
	"version": 1
}