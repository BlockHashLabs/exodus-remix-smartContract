{
	"id": "7ccf4b6252ed781caf9d664a67d11c8e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.5",
	"solcLongVersion": "0.7.5+commit.eb77ed08",
	"input": {
		"language": "Solidity",
		"sources": {
			"ExodusERC20Token/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.5;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = chainID;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        if (chainID == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, chainID, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
			},
			"ExodusERC20Token/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.5;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"ExodusERC20Token/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ExodusERC20Token/ECDSA.sol\":264:8750  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"ExodusERC20Token/ECDSA.sol\":264:8750  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220925e3239894aef24b05060be61ede3d230149bc19b7912b60d82627f9d58716664736f6c63430007050033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220925e3239894aef24b05060be61ede3d230149bc19b7912b60d82627f9d58716664736f6c63430007050033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 0x5E ORIGIN CODECOPY DUP10 0x4A 0xEF 0x24 0xB0 POP PUSH1 0xBE PUSH2 0xEDE3 0xD2 ADDRESS EQ SWAP12 0xC1 SWAP12 PUSH26 0x12B60D82627F9D58716664736F6C634300070500330000000000 ",
							"sourceMap": "264:8486:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220925e3239894aef24b05060be61ede3d230149bc19b7912b60d82627f9d58716664736f6c63430007050033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 0x5E ORIGIN CODECOPY DUP10 0x4A 0xEF 0x24 0xB0 POP PUSH1 0xBE PUSH2 0xEDE3 0xD2 ADDRESS EQ SWAP12 0xC1 SWAP12 PUSH26 0x12B60D82627F9D58716664736F6C634300070500330000000000 ",
							"sourceMap": "264:8486:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 264,
									"end": 8750,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 264,
									"end": 8750,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220925e3239894aef24b05060be61ede3d230149bc19b7912b60d82627f9d58716664736f6c63430007050033",
									".code": [
										{
											"begin": 264,
											"end": 8750,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 264,
											"end": 8750,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 264,
											"end": 8750,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 264,
											"end": 8750,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 264,
											"end": 8750,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 264,
											"end": 8750,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 264,
											"end": 8750,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 264,
											"end": 8750,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 264,
											"end": 8750,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ExodusERC20Token/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"ExodusERC20Token/ECDSA.sol\":{\"keccak256\":\"0x2fb4959d42d1a72b47f3c3c8db1e466d21dbfb33aa445fd6a8c1f1e84ba37cdf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10b87bfd64543429c28797a71b78149d9cb93261fc60bdfee25c56c6af886866\",\"dweb:/ipfs/QmVRvnZSbAgSSR8PfZnKSkLFPqqUkxJeS919FvszosQzsV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ExodusERC20Token/EIP712.sol": {
				"EIP712": {
					"abi": [],
					"devdoc": {
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ExodusERC20Token/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"ExodusERC20Token/ECDSA.sol\":{\"keccak256\":\"0x2fb4959d42d1a72b47f3c3c8db1e466d21dbfb33aa445fd6a8c1f1e84ba37cdf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10b87bfd64543429c28797a71b78149d9cb93261fc60bdfee25c56c6af886866\",\"dweb:/ipfs/QmVRvnZSbAgSSR8PfZnKSkLFPqqUkxJeS919FvszosQzsV\"]},\"ExodusERC20Token/EIP712.sol\":{\"keccak256\":\"0x76bfc700bb36030b1e9c73abc9b024eea9632c4538f0eedca7f15ae062b4581c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f5a92ca1f712919f5da7f70fabfa55626f772f6e455510a49b2b55ec0632315\",\"dweb:/ipfs/Qme3YZHzQgeAZ7m8tB9zWdRLopRqNsBppKVj9cpKuAaLBE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"ExodusERC20Token/ECDSA.sol": {
				"ast": {
					"absolutePath": "ExodusERC20Token/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							359
						]
					},
					"id": 360,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "58:205:0",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 359,
							"linearizedBaseContracts": [
								359
							],
							"name": "ECDSA",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 8,
									"members": [
										{
											"id": 3,
											"name": "NoError",
											"nodeType": "EnumValue",
											"src": "312:7:0"
										},
										{
											"id": 4,
											"name": "InvalidSignature",
											"nodeType": "EnumValue",
											"src": "329:16:0"
										},
										{
											"id": 5,
											"name": "InvalidSignatureLength",
											"nodeType": "EnumValue",
											"src": "355:22:0"
										},
										{
											"id": 6,
											"name": "InvalidSignatureS",
											"nodeType": "EnumValue",
											"src": "387:17:0"
										},
										{
											"id": 7,
											"name": "InvalidSignatureV",
											"nodeType": "EnumValue",
											"src": "414:17:0"
										}
									],
									"name": "RecoverError",
									"nodeType": "EnumDefinition",
									"src": "284:153:0"
								},
								{
									"body": {
										"id": 60,
										"nodeType": "Block",
										"src": "497:577:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$8",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 13,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "511:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$8",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 14,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 8,
															"src": "520:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 15,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"src": "520:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$8",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "511:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$8",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 22,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 19,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 10,
															"src": "607:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 20,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 8,
																"src": "616:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 21,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"src": "616:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "607:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 31,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 28,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 10,
																"src": "716:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$8",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 29,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 8,
																	"src": "725:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 30,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"src": "725:35:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$8",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "716:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$8",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 40,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 37,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 10,
																	"src": "838:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$8",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 38,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 8,
																		"src": "847:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 39,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"src": "847:30:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$8",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "838:39:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_enum$_RecoverError_$8",
																		"typeString": "enum ECDSA.RecoverError"
																	},
																	"id": 49,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 46,
																		"name": "error",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 10,
																		"src": "958:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$8",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"expression": {
																			"id": 47,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 8,
																			"src": "967:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 48,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureV",
																		"nodeType": "MemberAccess",
																		"src": "967:30:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$8",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	"src": "958:39:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 55,
																"nodeType": "IfStatement",
																"src": "954:114:0",
																"trueBody": {
																	"id": 54,
																	"nodeType": "Block",
																	"src": "999:69:0",
																	"statements": [
																		{
																			"expression": {
																				"arguments": [
																					{
																						"hexValue": "45434453413a20696e76616c6964207369676e6174757265202776272076616c7565",
																						"id": 51,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1020:36:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																							"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
																						},
																						"value": "ECDSA: invalid signature 'v' value"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																							"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
																						}
																					],
																					"id": 50,
																					"name": "revert",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [
																						-19,
																						-19
																					],
																					"referencedDeclaration": -19,
																					"src": "1013:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																						"typeString": "function (string memory) pure"
																					}
																				},
																				"id": 52,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1013:44:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$__$",
																					"typeString": "tuple()"
																				}
																			},
																			"id": 53,
																			"nodeType": "ExpressionStatement",
																			"src": "1013:44:0"
																		}
																	]
																}
															},
															"id": 56,
															"nodeType": "IfStatement",
															"src": "834:234:0",
															"trueBody": {
																"id": 45,
																"nodeType": "Block",
																"src": "879:69:0",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
																					"id": 42,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "900:36:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					},
																					"value": "ECDSA: invalid signature 's' value"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					}
																				],
																				"id": 41,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					-19,
																					-19
																				],
																				"referencedDeclaration": -19,
																				"src": "893:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 43,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "893:44:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 44,
																		"nodeType": "ExpressionStatement",
																		"src": "893:44:0"
																	}
																]
															}
														},
														"id": 57,
														"nodeType": "IfStatement",
														"src": "712:356:0",
														"trueBody": {
															"id": 36,
															"nodeType": "Block",
															"src": "762:66:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																				"id": 33,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "783:33:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				},
																				"value": "ECDSA: invalid signature length"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				}
																			],
																			"id": 32,
																			"name": "revert",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				-19,
																				-19
																			],
																			"referencedDeclaration": -19,
																			"src": "776:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																				"typeString": "function (string memory) pure"
																			}
																		},
																		"id": 34,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "776:41:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 35,
																	"nodeType": "ExpressionStatement",
																	"src": "776:41:0"
																}
															]
														}
													},
													"id": 58,
													"nodeType": "IfStatement",
													"src": "603:465:0",
													"trueBody": {
														"id": 27,
														"nodeType": "Block",
														"src": "647:59:0",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																			"id": 24,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "668:26:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			},
																			"value": "ECDSA: invalid signature"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			}
																		],
																		"id": 23,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			-19,
																			-19
																		],
																		"referencedDeclaration": -19,
																		"src": "661:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 25,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "661:34:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 26,
																"nodeType": "ExpressionStatement",
																"src": "661:34:0"
															}
														]
													}
												},
												"id": 59,
												"nodeType": "IfStatement",
												"src": "507:561:0",
												"trueBody": {
													"id": 18,
													"nodeType": "Block",
													"src": "542:55:0",
													"statements": [
														{
															"functionReturnParameters": 12,
															"id": 17,
															"nodeType": "Return",
															"src": "556:7:0"
														}
													]
												}
											}
										]
									},
									"id": 61,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "error",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "464:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$8",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 9,
													"name": "RecoverError",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 8,
													"src": "464:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$8",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:20:0"
									},
									"returnParameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "497:0:0"
									},
									"scope": 359,
									"src": "443:631:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2242:1175:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 73,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 66,
															"src": "2449:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2449:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 75,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2469:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2449:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 98,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 95,
																"name": "signature",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 66,
																"src": "2931:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2931:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "3634",
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2951:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "64"
														},
														"src": "2931:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 121,
														"nodeType": "Block",
														"src": "3330:81:0",
														"statements": [
															{
																"expression": {
																	"components": [
																		{
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 115,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3360:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 114,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3352:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 113,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "3352:7:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 116,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3352:10:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		{
																			"expression": {
																				"id": 117,
																				"name": "RecoverError",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 8,
																				"src": "3364:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																					"typeString": "type(enum ECDSA.RecoverError)"
																				}
																			},
																			"id": 118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "InvalidSignatureLength",
																			"nodeType": "MemberAccess",
																			"src": "3364:35:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_enum$_RecoverError_$8",
																				"typeString": "enum ECDSA.RecoverError"
																			}
																		}
																	],
																	"id": 119,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3351:49:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_payable_$_t_enum$_RecoverError_$8_$",
																		"typeString": "tuple(address payable,enum ECDSA.RecoverError)"
																	}
																},
																"functionReturnParameters": 72,
																"id": 120,
																"nodeType": "Return",
																"src": "3344:56:0"
															}
														]
													},
													"id": 122,
													"nodeType": "IfStatement",
													"src": "2927:484:0",
													"trueBody": {
														"id": 112,
														"nodeType": "Block",
														"src": "2955:369:0",
														"statements": [
															{
																"assignments": [
																	100
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 100,
																		"mutability": "mutable",
																		"name": "r",
																		"nodeType": "VariableDeclaration",
																		"scope": 112,
																		"src": "2969:9:0",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		"typeName": {
																			"id": 99,
																			"name": "bytes32",
																			"nodeType": "ElementaryTypeName",
																			"src": "2969:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 101,
																"nodeType": "VariableDeclarationStatement",
																"src": "2969:9:0"
															},
															{
																"assignments": [
																	103
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 103,
																		"mutability": "mutable",
																		"name": "vs",
																		"nodeType": "VariableDeclaration",
																		"scope": 112,
																		"src": "2992:10:0",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		"typeName": {
																			"id": 102,
																			"name": "bytes32",
																			"nodeType": "ElementaryTypeName",
																			"src": "2992:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 104,
																"nodeType": "VariableDeclarationStatement",
																"src": "2992:10:0"
															},
															{
																"AST": {
																	"nodeType": "YulBlock",
																	"src": "3156:114:0",
																	"statements": [
																		{
																			"nodeType": "YulAssignment",
																			"src": "3174:32:0",
																			"value": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "signature",
																								"nodeType": "YulIdentifier",
																								"src": "3189:9:0"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3200:4:0",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3185:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3185:20:0"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "3179:5:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3179:27:0"
																			},
																			"variableNames": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "3174:1:0"
																				}
																			]
																		},
																		{
																			"nodeType": "YulAssignment",
																			"src": "3223:33:0",
																			"value": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "signature",
																								"nodeType": "YulIdentifier",
																								"src": "3239:9:0"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3250:4:0",
																								"type": "",
																								"value": "0x40"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3235:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3235:20:0"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "3229:5:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3229:27:0"
																			},
																			"variableNames": [
																				{
																					"name": "vs",
																					"nodeType": "YulIdentifier",
																					"src": "3223:2:0"
																				}
																			]
																		}
																	]
																},
																"evmVersion": "istanbul",
																"externalReferences": [
																	{
																		"declaration": 100,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3174:1:0",
																		"valueSize": 1
																	},
																	{
																		"declaration": 66,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3189:9:0",
																		"valueSize": 1
																	},
																	{
																		"declaration": 66,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3239:9:0",
																		"valueSize": 1
																	},
																	{
																		"declaration": 103,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3223:2:0",
																		"valueSize": 1
																	}
																],
																"id": 105,
																"nodeType": "InlineAssembly",
																"src": "3147:123:0"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 107,
																			"name": "hash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 64,
																			"src": "3301:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 108,
																			"name": "r",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 100,
																			"src": "3307:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 109,
																			"name": "vs",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 103,
																			"src": "3310:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 106,
																		"name": "tryRecover",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			125,
																			180,
																			289
																		],
																		"referencedDeclaration": 180,
																		"src": "3290:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$8_$",
																			"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3290:23:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$8_$",
																		"typeString": "tuple(address,enum ECDSA.RecoverError)"
																	}
																},
																"functionReturnParameters": 72,
																"id": 111,
																"nodeType": "Return",
																"src": "3283:30:0"
															}
														]
													}
												},
												"id": 123,
												"nodeType": "IfStatement",
												"src": "2445:966:0",
												"trueBody": {
													"id": 94,
													"nodeType": "Block",
													"src": "2473:448:0",
													"statements": [
														{
															"assignments": [
																78
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 78,
																	"mutability": "mutable",
																	"name": "r",
																	"nodeType": "VariableDeclaration",
																	"scope": 94,
																	"src": "2487:9:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 77,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2487:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 79,
															"nodeType": "VariableDeclarationStatement",
															"src": "2487:9:0"
														},
														{
															"assignments": [
																81
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 81,
																	"mutability": "mutable",
																	"name": "s",
																	"nodeType": "VariableDeclaration",
																	"scope": 94,
																	"src": "2510:9:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 80,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2510:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 82,
															"nodeType": "VariableDeclarationStatement",
															"src": "2510:9:0"
														},
														{
															"assignments": [
																84
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 84,
																	"mutability": "mutable",
																	"name": "v",
																	"nodeType": "VariableDeclaration",
																	"scope": 94,
																	"src": "2533:7:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 83,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2533:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 85,
															"nodeType": "VariableDeclarationStatement",
															"src": "2533:7:0"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2694:171:0",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2712:32:0",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2727:9:0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2738:4:0",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2723:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2723:20:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2717:5:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2717:27:0"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "2712:1:0"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2761:32:0",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2776:9:0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2787:4:0",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2772:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2772:20:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2766:5:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2766:27:0"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "2761:1:0"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2810:41:0",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2820:1:0",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "2833:9:0"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2844:4:0",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2829:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2829:20:0"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2823:5:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2823:27:0"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "2815:4:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2815:36:0"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "2810:1:0"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 78,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2712:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 81,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2761:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 66,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2727:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 66,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2776:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 66,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2833:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 84,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2810:1:0",
																	"valueSize": 1
																}
															],
															"id": 86,
															"nodeType": "InlineAssembly",
															"src": "2685:180:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 88,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 64,
																		"src": "2896:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 89,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 84,
																		"src": "2902:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 90,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 78,
																		"src": "2905:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 91,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 81,
																		"src": "2908:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 87,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		125,
																		180,
																		289
																	],
																	"referencedDeclaration": 289,
																	"src": "2885:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$8_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																	}
																},
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2885:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$8_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 72,
															"id": 93,
															"nodeType": "Return",
															"src": "2878:32:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "1080:1053:0",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
									},
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2158:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 63,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2158:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "signature",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2172:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 65,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2172:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2157:38:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2219:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2219:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2228:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$8",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 70,
													"name": "RecoverError",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 8,
													"src": "2228:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$8",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2218:23:0"
									},
									"scope": 359,
									"src": "2138:1279:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 150,
										"nodeType": "Block",
										"src": "4290:140:0",
										"statements": [
											{
												"assignments": [
													136,
													138
												],
												"declarations": [
													{
														"constant": false,
														"id": 136,
														"mutability": "mutable",
														"name": "recovered",
														"nodeType": "VariableDeclaration",
														"scope": 150,
														"src": "4301:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 135,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4301:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 138,
														"mutability": "mutable",
														"name": "error",
														"nodeType": "VariableDeclaration",
														"scope": 150,
														"src": "4320:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$8",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 137,
															"name": "RecoverError",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 8,
															"src": "4320:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 143,
												"initialValue": {
													"arguments": [
														{
															"id": 140,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 128,
															"src": "4353:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 141,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 130,
															"src": "4359:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 139,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															125,
															180,
															289
														],
														"referencedDeclaration": 125,
														"src": "4342:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$8_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4342:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$8_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4300:69:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 145,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 138,
															"src": "4391:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 144,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 61,
														"src": "4379:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$8_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4379:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 147,
												"nodeType": "ExpressionStatement",
												"src": "4379:18:0"
											},
											{
												"expression": {
													"id": 148,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 136,
													"src": "4414:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 134,
												"id": 149,
												"nodeType": "Return",
												"src": "4407:16:0"
											}
										]
									},
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "3423:775:0",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "4220:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 127,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4220:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "signature",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "4234:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 129,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4234:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4219:38:0"
									},
									"returnParameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "4281:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4281:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4280:9:0"
									},
									"scope": 359,
									"src": "4203:227:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 179,
										"nodeType": "Block",
										"src": "4817:246:0",
										"statements": [
											{
												"assignments": [
													166
												],
												"declarations": [
													{
														"constant": false,
														"id": 166,
														"mutability": "mutable",
														"name": "s",
														"nodeType": "VariableDeclaration",
														"scope": 179,
														"src": "4827:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 165,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4827:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 167,
												"nodeType": "VariableDeclarationStatement",
												"src": "4827:9:0"
											},
											{
												"assignments": [
													169
												],
												"declarations": [
													{
														"constant": false,
														"id": 169,
														"mutability": "mutable",
														"name": "v",
														"nodeType": "VariableDeclaration",
														"scope": 179,
														"src": "4846:7:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 168,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4846:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 170,
												"nodeType": "VariableDeclarationStatement",
												"src": "4846:7:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4872:143:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4886:80:0",
															"value": {
																"arguments": [
																	{
																		"name": "vs",
																		"nodeType": "YulIdentifier",
																		"src": "4895:2:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4899:66:0",
																		"type": "",
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4891:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "4891:75:0"
															},
															"variableNames": [
																{
																	"name": "s",
																	"nodeType": "YulIdentifier",
																	"src": "4886:1:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4979:26:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4992:3:0",
																				"type": "",
																				"value": "255"
																			},
																			{
																				"name": "vs",
																				"nodeType": "YulIdentifier",
																				"src": "4997:2:0"
																			}
																		],
																		"functionName": {
																			"name": "shr",
																			"nodeType": "YulIdentifier",
																			"src": "4988:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4988:12:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5002:2:0",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "4984:21:0"
															},
															"variableNames": [
																{
																	"name": "v",
																	"nodeType": "YulIdentifier",
																	"src": "4979:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 166,
														"isOffset": false,
														"isSlot": false,
														"src": "4886:1:0",
														"valueSize": 1
													},
													{
														"declaration": 169,
														"isOffset": false,
														"isSlot": false,
														"src": "4979:1:0",
														"valueSize": 1
													},
													{
														"declaration": 158,
														"isOffset": false,
														"isSlot": false,
														"src": "4895:2:0",
														"valueSize": 1
													},
													{
														"declaration": 158,
														"isOffset": false,
														"isSlot": false,
														"src": "4997:2:0",
														"valueSize": 1
													}
												],
												"id": 171,
												"nodeType": "InlineAssembly",
												"src": "4863:152:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 173,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 154,
															"src": "5042:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 174,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5048:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 175,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "5051:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 176,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 166,
															"src": "5054:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 172,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															125,
															180,
															289
														],
														"referencedDeclaration": 289,
														"src": "5031:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$8_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5031:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$8_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 164,
												"id": 178,
												"nodeType": "Return",
												"src": "5024:32:0"
											}
										]
									},
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "4436:243:0",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
									},
									"id": 180,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "4713:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 153,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4713:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "4735:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 155,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4735:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "vs",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "4754:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 157,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4754:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4703:67:0"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "4794:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4794:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "4803:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$8",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 162,
													"name": "RecoverError",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 8,
													"src": "4803:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$8",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4793:23:0"
									},
									"scope": 359,
									"src": "4684:379:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 208,
										"nodeType": "Block",
										"src": "5344:136:0",
										"statements": [
											{
												"assignments": [
													193,
													195
												],
												"declarations": [
													{
														"constant": false,
														"id": 193,
														"mutability": "mutable",
														"name": "recovered",
														"nodeType": "VariableDeclaration",
														"scope": 208,
														"src": "5355:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 192,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5355:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 195,
														"mutability": "mutable",
														"name": "error",
														"nodeType": "VariableDeclaration",
														"scope": 208,
														"src": "5374:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$8",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 194,
															"name": "RecoverError",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 8,
															"src": "5374:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 201,
												"initialValue": {
													"arguments": [
														{
															"id": 197,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 183,
															"src": "5407:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 198,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "5413:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 199,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 187,
															"src": "5416:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 196,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															125,
															180,
															289
														],
														"referencedDeclaration": 180,
														"src": "5396:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$8_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5396:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$8_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5354:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 203,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 195,
															"src": "5441:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 202,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 61,
														"src": "5429:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$8_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5429:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 205,
												"nodeType": "ExpressionStatement",
												"src": "5429:18:0"
											},
											{
												"expression": {
													"id": 206,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 193,
													"src": "5464:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 191,
												"id": 207,
												"nodeType": "Return",
												"src": "5457:16:0"
											}
										]
									},
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "5069:154:0",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
									},
									"id": 209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "5254:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 182,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5254:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "5276:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 184,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5276:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "vs",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "5295:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 186,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5295:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5244:67:0"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "5335:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5335:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5334:9:0"
									},
									"scope": 359,
									"src": "5228:252:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 288,
										"nodeType": "Block",
										"src": "5803:1454:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 227,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 218,
																"src": "6699:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6691:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 225,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6691:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 228,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6691:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 229,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6704:66:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6691:79:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 240,
												"nodeType": "IfStatement",
												"src": "6687:161:0",
												"trueBody": {
													"id": 239,
													"nodeType": "Block",
													"src": "6772:76:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 233,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6802:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 232,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6794:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 231,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6794:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 234,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6794:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"expression": {
																			"id": 235,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 8,
																			"src": "6806:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 236,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"src": "6806:30:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$8",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 237,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_payable_$_t_enum$_RecoverError_$8_$",
																	"typeString": "tuple(address payable,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 224,
															"id": 238,
															"nodeType": "Return",
															"src": "6786:51:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 243,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 241,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 214,
															"src": "6861:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "3237",
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6866:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_27_by_1",
																"typeString": "int_const 27"
															},
															"value": "27"
														},
														"src": "6861:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 246,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 244,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 214,
															"src": "6872:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "3238",
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6877:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_28_by_1",
																"typeString": "int_const 28"
															},
															"value": "28"
														},
														"src": "6872:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6861:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 257,
												"nodeType": "IfStatement",
												"src": "6857:100:0",
												"trueBody": {
													"id": 256,
													"nodeType": "Block",
													"src": "6881:76:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 250,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6911:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 249,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6903:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 248,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6903:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6903:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"expression": {
																			"id": 252,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 8,
																			"src": "6915:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 253,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureV",
																		"nodeType": "MemberAccess",
																		"src": "6915:30:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$8",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 254,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6902:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_payable_$_t_enum$_RecoverError_$8_$",
																	"typeString": "tuple(address payable,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 224,
															"id": 255,
															"nodeType": "Return",
															"src": "6895:51:0"
														}
													]
												}
											},
											{
												"assignments": [
													259
												],
												"declarations": [
													{
														"constant": false,
														"id": 259,
														"mutability": "mutable",
														"name": "signer",
														"nodeType": "VariableDeclaration",
														"scope": 288,
														"src": "7051:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 258,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7051:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 266,
												"initialValue": {
													"arguments": [
														{
															"id": 261,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 212,
															"src": "7078:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 262,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 214,
															"src": "7084:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 263,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "7087:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 264,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "7090:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 260,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -6,
														"src": "7068:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7068:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7051:41:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 267,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 259,
														"src": "7106:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 270,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7124:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7116:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 268,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7116:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 271,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7116:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "7106:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 282,
												"nodeType": "IfStatement",
												"src": "7102:101:0",
												"trueBody": {
													"id": 281,
													"nodeType": "Block",
													"src": "7128:75:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 275,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7158:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7150:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 273,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7150:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7150:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"expression": {
																			"id": 277,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 8,
																			"src": "7162:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 278,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"src": "7162:29:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$8",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 279,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7149:43:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_payable_$_t_enum$_RecoverError_$8_$",
																	"typeString": "tuple(address payable,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 224,
															"id": 280,
															"nodeType": "Return",
															"src": "7142:50:0"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 283,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "7221:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 284,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 8,
																"src": "7229:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$8_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"src": "7229:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"id": 286,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7220:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$8_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 224,
												"id": 287,
												"nodeType": "Return",
												"src": "7213:37:0"
											}
										]
									},
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "5486:163:0",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
									},
									"id": 289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "5683:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 211,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5683:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "5705:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 213,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5705:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "5722:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 215,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5722:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "5741:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 217,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5741:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5673:83:0"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "5780:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 220,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5780:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "5789:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$8",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 222,
													"name": "RecoverError",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 8,
													"src": "5789:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$8",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5779:23:0"
									},
									"scope": 359,
									"src": "5654:1603:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 320,
										"nodeType": "Block",
										"src": "7522:138:0",
										"statements": [
											{
												"assignments": [
													304,
													306
												],
												"declarations": [
													{
														"constant": false,
														"id": 304,
														"mutability": "mutable",
														"name": "recovered",
														"nodeType": "VariableDeclaration",
														"scope": 320,
														"src": "7533:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 303,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7533:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 306,
														"mutability": "mutable",
														"name": "error",
														"nodeType": "VariableDeclaration",
														"scope": 320,
														"src": "7552:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$8",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 305,
															"name": "RecoverError",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 8,
															"src": "7552:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 313,
												"initialValue": {
													"arguments": [
														{
															"id": 308,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "7585:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 309,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "7591:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 310,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "7594:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 311,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 298,
															"src": "7597:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 307,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															125,
															180,
															289
														],
														"referencedDeclaration": 289,
														"src": "7574:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$8_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7574:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$8_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7532:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 315,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "7621:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$8",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 314,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 61,
														"src": "7609:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$8_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7609:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 317,
												"nodeType": "ExpressionStatement",
												"src": "7609:18:0"
											},
											{
												"expression": {
													"id": 318,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 304,
													"src": "7644:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 302,
												"id": 319,
												"nodeType": "Return",
												"src": "7637:16:0"
											}
										]
									},
									"documentation": {
										"id": 290,
										"nodeType": "StructuredDocumentation",
										"src": "7263:122:0",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "7416:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 291,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7416:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "7438:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 293,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "7438:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "7455:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 295,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7455:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "7474:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 297,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7474:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7406:83:0"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "7513:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 300,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7513:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7512:9:0"
									},
									"scope": 359,
									"src": "7390:270:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 337,
										"nodeType": "Block",
										"src": "8028:187:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																	"id": 332,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8166:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n32"
																},
																{
																	"id": 333,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 324,
																	"src": "8202:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 330,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "8149:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 331,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "8149:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8149:58:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 329,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "8139:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8139:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 328,
												"id": 336,
												"nodeType": "Return",
												"src": "8132:76:0"
											}
										]
									},
									"documentation": {
										"id": 322,
										"nodeType": "StructuredDocumentation",
										"src": "7666:279:0",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "7982:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 323,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7982:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7981:14:0"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "8019:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 326,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8019:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8018:9:0"
									},
									"scope": 359,
									"src": "7950:265:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 357,
										"nodeType": "Block",
										"src": "8656:92:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1901",
																	"id": 351,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8700:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	"value": "\u0019\u0001"
																},
																{
																	"id": 352,
																	"name": "domainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 341,
																	"src": "8712:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 353,
																	"name": "structHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 343,
																	"src": "8729:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 349,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "8683:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 350,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "8683:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 354,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8683:57:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 348,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "8673:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8673:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 347,
												"id": 356,
												"nodeType": "Return",
												"src": "8666:75:0"
											}
										]
									},
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "8221:328:0",
										"text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
									},
									"id": 358,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "8579:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 340,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8579:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "structHash",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "8604:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 342,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8604:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8578:45:0"
									},
									"returnParameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "8647:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 345,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8647:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8646:9:0"
									},
									"scope": 359,
									"src": "8554:194:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 360,
							"src": "264:8486:0"
						}
					],
					"src": "33:8718:0"
				},
				"id": 0
			},
			"ExodusERC20Token/EIP712.sol": {
				"ast": {
					"absolutePath": "ExodusERC20Token/EIP712.sol",
					"exportedSymbols": {
						"ECDSA": [
							359
						],
						"EIP712": [
							506
						]
					},
					"id": 507,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 361,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"absolutePath": "ExodusERC20Token/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 362,
							"nodeType": "ImportDirective",
							"scope": 507,
							"sourceUnit": 360,
							"src": "58:21:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 363,
								"nodeType": "StructuredDocumentation",
								"src": "81:1142:1",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._"
							},
							"fullyImplemented": true,
							"id": 506,
							"linearizedBaseContracts": [
								506
							],
							"name": "EIP712",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 365,
									"mutability": "immutable",
									"name": "_CACHED_DOMAIN_SEPARATOR",
									"nodeType": "VariableDeclaration",
									"scope": 506,
									"src": "1492:50:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 364,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1492:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 367,
									"mutability": "immutable",
									"name": "_CACHED_CHAIN_ID",
									"nodeType": "VariableDeclaration",
									"scope": 506,
									"src": "1548:42:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 366,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1548:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 369,
									"mutability": "immutable",
									"name": "_HASHED_NAME",
									"nodeType": "VariableDeclaration",
									"scope": 506,
									"src": "1597:38:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 368,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1597:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 371,
									"mutability": "immutable",
									"name": "_HASHED_VERSION",
									"nodeType": "VariableDeclaration",
									"scope": 506,
									"src": "1641:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 370,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1641:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 373,
									"mutability": "immutable",
									"name": "_TYPE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 506,
									"src": "1688:36:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 372,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1688:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 433,
										"nodeType": "Block",
										"src": "2395:591:1",
										"statements": [
											{
												"assignments": [
													382
												],
												"declarations": [
													{
														"constant": false,
														"id": 382,
														"mutability": "mutable",
														"name": "chainID",
														"nodeType": "VariableDeclaration",
														"scope": 433,
														"src": "2405:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 381,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2405:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 383,
												"nodeType": "VariableDeclarationStatement",
												"src": "2405:15:1"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2439:44:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2453:20:1",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "chainid",
																	"nodeType": "YulIdentifier",
																	"src": "2464:7:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2464:9:1"
															},
															"variableNames": [
																{
																	"name": "chainID",
																	"nodeType": "YulIdentifier",
																	"src": "2453:7:1"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 382,
														"isOffset": false,
														"isSlot": false,
														"src": "2453:7:1",
														"valueSize": 1
													}
												],
												"id": 384,
												"nodeType": "InlineAssembly",
												"src": "2430:53:1"
											},
											{
												"assignments": [
													386
												],
												"declarations": [
													{
														"constant": false,
														"id": 386,
														"mutability": "mutable",
														"name": "hashedName",
														"nodeType": "VariableDeclaration",
														"scope": 433,
														"src": "2493:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 385,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2493:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 393,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 390,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 376,
																	"src": "2530:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 389,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2524:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 388,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2524:5:1",
																	"typeDescriptions": {}
																}
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2524:11:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 387,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "2514:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2514:22:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2493:43:1"
											},
											{
												"assignments": [
													395
												],
												"declarations": [
													{
														"constant": false,
														"id": 395,
														"mutability": "mutable",
														"name": "hashedVersion",
														"nodeType": "VariableDeclaration",
														"scope": 433,
														"src": "2546:21:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 394,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2546:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 402,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 399,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 378,
																	"src": "2586:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 398,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2580:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 397,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2580:5:1",
																	"typeDescriptions": {}
																}
															},
															"id": 400,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2580:14:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 396,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "2570:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2570:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2546:49:1"
											},
											{
												"assignments": [
													404
												],
												"declarations": [
													{
														"constant": false,
														"id": 404,
														"mutability": "mutable",
														"name": "typeHash",
														"nodeType": "VariableDeclaration",
														"scope": 433,
														"src": "2605:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 403,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2605:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 408,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
															"id": 406,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2647:84:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
															},
															"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
															}
														],
														"id": 405,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "2624:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2624:117:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2605:136:1"
											},
											{
												"expression": {
													"id": 411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 409,
														"name": "_HASHED_NAME",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "2751:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 410,
														"name": "hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "2766:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2751:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 412,
												"nodeType": "ExpressionStatement",
												"src": "2751:25:1"
											},
											{
												"expression": {
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 413,
														"name": "_HASHED_VERSION",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 371,
														"src": "2786:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 414,
														"name": "hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 395,
														"src": "2804:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2786:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 416,
												"nodeType": "ExpressionStatement",
												"src": "2786:31:1"
											},
											{
												"expression": {
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 417,
														"name": "_CACHED_CHAIN_ID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 367,
														"src": "2827:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 418,
														"name": "chainID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 382,
														"src": "2846:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2827:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "2827:26:1"
											},
											{
												"expression": {
													"id": 427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 421,
														"name": "_CACHED_DOMAIN_SEPARATOR",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 365,
														"src": "2863:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 423,
																"name": "typeHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 404,
																"src": "2912:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 424,
																"name": "hashedName",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "2922:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 425,
																"name": "hashedVersion",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 395,
																"src": "2934:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 422,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "2890:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
															}
														},
														"id": 426,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2890:58:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2863:85:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 428,
												"nodeType": "ExpressionStatement",
												"src": "2863:85:1"
											},
											{
												"expression": {
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 429,
														"name": "_TYPE_HASH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 373,
														"src": "2958:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 430,
														"name": "typeHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 404,
														"src": "2971:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2958:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 432,
												"nodeType": "ExpressionStatement",
												"src": "2958:21:1"
											}
										]
									},
									"documentation": {
										"id": 374,
										"nodeType": "StructuredDocumentation",
										"src": "1776:559:1",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 434,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "name",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "2352:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 375,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2352:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "version",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "2372:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 377,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2372:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2351:43:1"
									},
									"returnParameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2395:0:1"
									},
									"scope": 506,
									"src": "2340:646:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 458,
										"nodeType": "Block",
										"src": "3134:295:1",
										"statements": [
											{
												"assignments": [
													441
												],
												"declarations": [
													{
														"constant": false,
														"id": 441,
														"mutability": "mutable",
														"name": "chainID",
														"nodeType": "VariableDeclaration",
														"scope": 458,
														"src": "3144:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 440,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3144:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 442,
												"nodeType": "VariableDeclarationStatement",
												"src": "3144:15:1"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3178:44:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3192:20:1",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "chainid",
																	"nodeType": "YulIdentifier",
																	"src": "3203:7:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3203:9:1"
															},
															"variableNames": [
																{
																	"name": "chainID",
																	"nodeType": "YulIdentifier",
																	"src": "3192:7:1"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 441,
														"isOffset": false,
														"isSlot": false,
														"src": "3192:7:1",
														"valueSize": 1
													}
												],
												"id": 443,
												"nodeType": "InlineAssembly",
												"src": "3169:53:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 444,
														"name": "chainID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 441,
														"src": "3236:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 445,
														"name": "_CACHED_CHAIN_ID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 367,
														"src": "3247:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3236:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 456,
													"nodeType": "Block",
													"src": "3327:96:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 451,
																		"name": "_TYPE_HASH",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 373,
																		"src": "3370:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 452,
																		"name": "_HASHED_NAME",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 369,
																		"src": "3382:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 453,
																		"name": "_HASHED_VERSION",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 371,
																		"src": "3396:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 450,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 489,
																	"src": "3348:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																		"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
																	}
																},
																"id": 454,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3348:64:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 439,
															"id": 455,
															"nodeType": "Return",
															"src": "3341:71:1"
														}
													]
												},
												"id": 457,
												"nodeType": "IfStatement",
												"src": "3232:191:1",
												"trueBody": {
													"id": 449,
													"nodeType": "Block",
													"src": "3265:56:1",
													"statements": [
														{
															"expression": {
																"id": 447,
																"name": "_CACHED_DOMAIN_SEPARATOR",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 365,
																"src": "3286:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 439,
															"id": 448,
															"nodeType": "Return",
															"src": "3279:31:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 435,
										"nodeType": "StructuredDocumentation",
										"src": "2992:75:1",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 459,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3099:2:1"
									},
									"returnParameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "3125:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 437,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3125:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3124:9:1"
									},
									"scope": 506,
									"src": "3072:357:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 488,
										"nodeType": "Block",
										"src": "3584:190:1",
										"statements": [
											{
												"assignments": [
													471
												],
												"declarations": [
													{
														"constant": false,
														"id": 471,
														"mutability": "mutable",
														"name": "chainID",
														"nodeType": "VariableDeclaration",
														"scope": 488,
														"src": "3594:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 470,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3594:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 472,
												"nodeType": "VariableDeclarationStatement",
												"src": "3594:15:1"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3628:44:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3642:20:1",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "chainid",
																	"nodeType": "YulIdentifier",
																	"src": "3653:7:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3653:9:1"
															},
															"variableNames": [
																{
																	"name": "chainID",
																	"nodeType": "YulIdentifier",
																	"src": "3642:7:1"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 471,
														"isOffset": false,
														"isSlot": false,
														"src": "3642:7:1",
														"valueSize": 1
													}
												],
												"id": 473,
												"nodeType": "InlineAssembly",
												"src": "3619:53:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 477,
																	"name": "typeHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 461,
																	"src": "3710:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 478,
																	"name": "nameHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 463,
																	"src": "3720:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 479,
																	"name": "versionHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 465,
																	"src": "3730:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 480,
																	"name": "chainID",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 471,
																	"src": "3743:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 483,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "3760:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$506",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$506",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3752:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 481,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3752:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3752:13:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 475,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "3699:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 476,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "3699:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3699:67:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 474,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "3689:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3689:78:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 469,
												"id": 487,
												"nodeType": "Return",
												"src": "3682:85:1"
											}
										]
									},
									"id": 489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "typeHash",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "3475:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 460,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "nameHash",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "3501:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 462,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "versionHash",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "3527:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 464,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3527:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3465:87:1"
									},
									"returnParameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "3575:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 467,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3575:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3574:9:1"
									},
									"scope": 506,
									"src": "3435:339:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 504,
										"nodeType": "Block",
										"src": "4485:79:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 499,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 459,
																"src": "4524:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4524:20:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 501,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "4546:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 497,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "4502:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$359_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 498,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 358,
														"src": "4502:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4502:55:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 496,
												"id": 503,
												"nodeType": "Return",
												"src": "4495:62:1"
											}
										]
									},
									"documentation": {
										"id": 490,
										"nodeType": "StructuredDocumentation",
										"src": "3780:614:1",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 505,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "structHash",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "4425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 491,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4425:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4424:20:1"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "4476:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 494,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4476:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4475:9:1"
									},
									"scope": 506,
									"src": "4399:165:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 507,
							"src": "1224:3342:1"
						}
					],
					"src": "33:4534:1"
				},
				"id": 1
			}
		}
	}
}